# -*- mode: python -*-
#
#    Copyright (C) 2019 Carl Hetherington <cth@carlh.net>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

def make_toolchain(filename, arch, sdk_prefix, sdk):
    with open(filename, 'w') as f:
        flags = "-arch %s" % arch
        print("set(CMAKE_SYSTEM_NAME Darwin)", file=f)
        print("set(CMAKE_SYSTEM_PROCESSOR %s)" % arch, file=f)
        print("set(CMAKE_C_COMPILER    gcc)", file=f)
        print("set(CMAKE_CXX_COMPILER  g++)", file=f)
        print("set(AS                  as)", file=f)
        print("set(AR                  as)", file=f)
        print("set(OBJCOPY             objcopy)", file=f)
        print("set(OBJDUMP             objdump)", file=f)
        print("set(CMAKE_FIND_ROOT_PATH /usr/${TOOLCHAIN_PREFIX})", file=f)
        print("set(CMAKE_OSX_SYSROOT %s/MacOSX%s.sdk)" % (sdk_prefix, sdk), file=f)
        print('set(CMAKE_C_FLAGS   "-std=gnu99 -fdata-sections -ffunction-sections %s" CACHE INTERNAL "c compiler flags")' % flags, file=f)
        print('set(CMAKE_CXX_FLAGS "-fdata-sections -ffunction-sections %s" CACHE INTERNAL "cxx compiler flags")' % flags, file=f)
        print('set(CMAKE_ASM_FLAGS "" CACHE INTERNAL "asm compiler flags")', file=f)
        print('set(CMAKE_EXE_LINKER_FLAGS "-dead_strip" CACHE INTERNAL "exe link flags")', file=f)
        print('SET(CMAKE_C_FLAGS_DEBUG "-O0 -g -ggdb3" CACHE INTERNAL "c debug compiler flags")', file=f)
        print('SET(CMAKE_CXX_FLAGS_DEBUG "-O0 -g -ggdb3" CACHE INTERNAL "cxx debug compiler flags")', file=f)
        print('SET(CMAKE_ASM_FLAGS_DEBUG "-g -ggdb3" CACHE INTERNAL "asm debug compiler flags")', file=f)
        print('SET(CMAKE_C_FLAGS_RELEASE "-O2 -g -ggdb3" CACHE INTERNAL "c release compiler flags")', file=f)
        print('SET(CMAKE_CXX_FLAGS_RELEASE "-O2 -g -ggdb3" CACHE INTERNAL "cxx release compiler flags")', file=f)
        print('SET(CMAKE_ASM_FLAGS_RELEASE "" CACHE INTERNAL "asm release compiler flags")', file=f)


def build(target, options):
    if target.platform == 'linux':
        type = 'generic'
        blockdev = 'linux'
        ext = 'a'
        device = 'dev'
        target.command('CFLAGS=-fPIC cmake .')
    elif target.platform == 'osx':
        if target.arch == 'x86_64':
            type = 'osx'
        elif target.arch == 'arm64':
            type = 'osx-arm64'
        make_toolchain('toolchain/%s.cmake' % type, target.arch, target.sdk_prefix, target.sdk)
        blockdev = 'linux'
        ext = 'dylib'
        device = 'dev'
    elif target.platform == 'windows':
        type = 'mingw' if target.bits == 64 else 'mingw-32'
        blockdev = 'windows'
        ext = 'dll'
        device = 'windows'

    target.command('mkdir -p %s/include/lwext4' % target.directory)
    target.command('cp -r include/* %s/include/lwext4' % target.directory)
    target.command('make %s' % type)
    target.command('make -j%d -C build_%s' % (target.parallel, type))
    target.command('cp -r build_%s/include/generated %s/include/lwext4' % (type, target.directory))
    target.command('cp blockdev/%s/file_%s.h %s/include/lwext4' % (blockdev, device, target.directory))
    target.command('mkdir -p %s/lib' % target.directory)
    target.command('cp build_%s/src/liblwext4.%s %s/lib' % (type, ext, target.directory))
    target.command('cp build_%s/blockdev/libblockdev.%s %s/lib' % (type, ext, target.directory))
